#include <errno.h>
#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <fcntl.h>
#include <sys/mman.h>
#include <linux/types.h>
#include <sys/ioctl.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <termios.h>
#include <stdarg.h>

#define BAUDRATE        B9600
#define MODEMDEVICE     "/dev/tts/0"
#define RS232_DEV	"/dev/ttyO1"
#define _POSIX_SOURCE   1

#define SET_UART 1

#define N	256

int Uart_Open(char *dev_name)
{
	int fd;
#if SET_UART
    struct termios  oldtio, newtio;
#endif


    printf("Start...\n");
    fd = open(dev_name, O_RDWR|O_NOCTTY);

    if (fd < 0) {
        perror(dev_name);
        exit(1);
    }

    printf("Open...\n");
#if SET_UART	
    tcgetattr(fd, &oldtio);
    bzero(&newtio, sizeof(newtio));
	
	newtio = oldtio;

	cfsetispeed(&newtio, BAUDRATE);
	cfsetospeed(&newtio, BAUDRATE);
	cfmakeraw(&newtio);
	
    tcflush(fd, TCIOFLUSH);
    tcsetattr(fd, TCSANOW, &newtio);
#else
	system("stty sane 9600 raw -echo -crtscts parodd < /dev/tts/0");
#endif	
	return fd;

}

int Uart_Close(int fd)
{
	close(fd);
	return 0;
}

int Uart_Read(int fd, void *pData, int size)
{
	return read(fd, pData, size);
}

int Uart_Write(int fd, void *pData, int size)
{
	return write(fd, pData, size);
}

int fd_printf(int fd, char * format, ...)
{
  char buffer[256];
  int size, ret;
  va_list args;
  va_start (args, format);
  size = vsprintf (buffer,format, args);
  if(size > 0){
	printf("Sending %s\n", buffer);
	ret = write (fd, buffer, size);
  }
  else
	ret = -1;
  va_end (args);
  tcdrain( fd );
  return ret;
}

int RS232_write_test()
{
	int fd;
	system("echo 1 > /sys/class/gpio/gpio33/value");
	fd = Uart_Open(RS232_DEV);
	fd_printf(fd, "\r\n *******************************");
	fd_printf(fd, "\r\n  RS-232 TEST");
	fd_printf(fd, "\r\n ******************************* \r\n");
	Uart_Close(fd);
	printf("End of %s\n", __func__);
	return 0;
}

int RS232_read_test()
{
	int fd, i;
	char buffer[256];
	system("echo 0 > /sys/class/gpio/gpio33/value");
	fd = Uart_Open(RS232_DEV);
	printf("\r\nTry to read a charachter from RS232...");
	if(Uart_Read(fd, buffer, N) != N)
		perror("\nRS232 :");
	else{
		printf("\nGot ");
		for(i = 0;i< N;i++)
			printf("0x%02x ", buffer[i]);
		printf("\tfrom RS232\n");
	}
	Uart_Close(fd);
	printf("End of %s\n", __func__);
	return 0;
}

int main(int argc, char *argv[])
{
	if(argc > 1){
		if(strcmp(argv[1], "r") == 0)
			RS232_read_test();
	}else
		RS232_write_test();
	return 0;
}
